import React,{useState, useEffect} from 'react'
import { Formik, Field } from 'formik'
import { Form, Input, TextArea, Button, Select, Label, Dropdown, Dimmer, Loader, Icon, Message, Modal } from 'semantic-ui-react'
import {paymenthistoryvalidations} from './validate'
import AlertSuccess from '../../../../include/alertsuccess'
import AlertError from '../../../../include/alerterror'

import DatePicker from "react-datepicker"
import moment from 'moment'
import Cleave from 'cleave.js/react'
import axios from 'axios'

export default function TabEarnings(props) {

	const [spinner, setspinner] = useState(false);
	const [btnspin, setbtnspin] = useState(false);
	const [isoff, setisoff] = useState('off');
	const [state, setstate] = useState({
		id:props.idffiliate,
		paid_sum:'',
		payment_date:'',
		comments:'',
		admin_comments:''
	});


	/* Spinner and Alert */
	const [successmsg, setsuccess] = useState(false);
	const [errormsg, seterror] = useState(false);
	function CloseAlert(data){
		setsuccess(data);
		seterror(data);
	}
	function reloadlist(){
		props.reloadTrigger(true);
	}
	function showalert(text){
		reloadlist();
		props.showAlertMessage(true);
		props.messageAlert(text);
		props.closeTrigger(false);
	}


    /* Save Sum */
	function handleSubmitForm(values, { props = this.props, setSubmitting, resetForm, setErrors }){

		const getvalue = {
			id:values.id,
			paid_sum:values.paid_sum,
			payment_date:moment(new Date(values.payment_date)).format('YYYY-MM-DD'),
			comments:values.comments,
			admin_comments:values.admin_comments,
		}

		setbtnspin(true);

		let formData = new FormData();
		formData.append('type','merchant_affaddedsum');
		formData.append('info',JSON.stringify(getvalue));
		axios.post('/merchant/affiliate/request.php',formData)
		.then(function (response) {
			let obj = response.data;
			if(obj==1){
				showalert('You have successfully added sum');
			}
			setbtnspin(false);
			if(obj==0){resetForm();seterror(true);return false;}
			Object.keys(obj).forEach(function(key) {setErrors(obj)});
		})
		.catch(function (error) {resetForm();seterror(true);return false;});
   }

   const [dataearn, setdataearn] = useState({});
	 const [ispayable, setispayable] = useState(false);
	 function TabGetEarnings(){
		 setspinner(true);
		 let formData = new FormData();
		 formData.append('type','merchant_afftabEarnings');
		 formData.append('id',props.idffiliate);
		 axios.post('/merchant/affiliate/request.php',formData)
		 .then(function (response) {
			 let obj = response.data;
			 setdataearn(obj);
			 if(obj.total_earnumber==0){
				   setispayable(true);
			 }
			 setspinner(false);
		 })
		 .catch(function (error) {setspinner(false);return false;});
	 }


	useEffect(()=>{
		TabGetEarnings();
	},[]);

	return (
		<div className={spinner?'tablsegment ui bottom attached segment active tab loading':'tablsegment ui bottom attached segment active tab'}>
			{successmsg&&<AlertSuccess CloseTheAlert={CloseAlert} sizeWidth='full' TextAlert='Affiliate information successfully updated'/>}
			{errormsg&&<AlertError CloseTheAlert={CloseAlert} sizeWidth='full' TextAlert='Affiliate failed to update information'/>}
			<Formik
			    enableReinitialize
	            initialValues={state}
	            validationSchema={paymenthistoryvalidations}
	            onSubmit={handleSubmitForm}
	            render={formProps => {
	            const { values, isSubmitting, errors, handleChange, handleBlur, handleSubmit, isValid, touched, setFieldValue } = formProps
		          return(
						<div className="tab-wrapper">
							<Form>


								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>Paid Earnings</h2>
										<h3>All the earnings from orders which are with status 'Not Paid'. These earnings are not taken into account anywhere, as they are yet to be confirmed. You can confirm them, by changing the status of the orders to 'Paid'.</h3>
									</div>
									<div className="column iscontent">{dataearn.paid_earnings}</div>
								</div>
								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>Unpaid Earnings</h2>
									</div>
									<div className="column iscontent">{dataearn.unpaid_earnings}</div>
								</div>
								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>Total earnings per month</h2>
										<h3>This shows the total earnings generated by the affiliate for the current and the past month. It includes only the paid orders earnings and the two tier earnings (if you have enabled it).</h3>
									</div>
									<div className="column iscontent">{dataearn.total_earnings}</div>
								</div>
								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>Total sales per month</h2>
										<h3>This shows the total earnings generated by the affiliate for the current and the past month. It includes only the paid orders earnings and the two tier earnings (if you have enabled it).</h3>
									</div>
									<div className="column iscontent">{dataearn.total_sales}</div>
								</div>
								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>Lifetime earnings</h2>
									</div>
									<div className="column iscontent">{dataearn.total_earnings}</div>
								</div>
								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>Lifetime referred orders total</h2>
									</div>
									<div className="column iscontent">{dataearn.approved_orders}</div>
								</div>

								{/*<div className="manual-paid" color='blue'>Manually mark sum as paid</div>

								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>Paid Sum</h2>
										<h3>Enter sum in ($) US Dollar</h3>
									</div>
									<div className="column iscontent">
										<Form.Group widths='equal'>
											<Field name="paid_sum">
												{({ field, form }) => (
												<Form.Field className={(() => {return form.touched[field.name] && form.errors[field.name] ? 'error' : "";})()}>
													<Cleave {...field} options={{numeral: true,numeralThousandsGroupStyle: 'thousand'}} onChange={handleChange} autoComplete={isoff} placeholder="Enter amount"/>
													{ form.touched[field.name] && form.errors[field.name] && <Label className="ui above prompt label errorlabel"><i class="fa fa-exclamation-triangle"></i>{form.errors[field.name]}</Label> }
												</Form.Field>
												)}
											</Field>
										</Form.Group>
									</div>
								</div>

								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>For date</h2>
										<h3>Choose for which date you are marking the commission for i.e. if its for the referred orders for May 2019, choose May 2019 as the date. If its for two or more months commission, then choose the last month as date.</h3>
									</div>
									<div className="column iscontent">
										<Form.Group widths='equal'>
											<Field name="payment_date">
												{({ field, form }) => (
												<Form.Field className={(() => {return form.touched[field.name] && form.errors[field.name] ? 'error' : "";})()}>
													<div className="date-wrapper">
														<DatePicker
															showMonthDropdown
															showYearDropdown
															selected={values.payment_date}
															name="payment_date"
															{...field}
															autoComplete={isoff}
															onChange={date => setFieldValue('payment_date',date)}
															placeholderText="Enter date"/>
														</div>
														{ form.touched[field.name] && form.errors[field.name] && <Label className="ui above prompt label errorlabel"><i class="fa fa-exclamation-triangle"></i>{form.errors[field.name]}</Label> }
												</Form.Field>
												)}
											</Field>
										</Form.Group>
									</div>
								</div>

								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>Coments</h2>
									</div>
									<div className="column iscontent">
										<Form.Group widths='equal'>
											<Field name="comments">
												{({ field, form }) => (
												<Form.Field className={(() => {return form.touched[field.name] && form.errors[field.name] ? 'error' : "";})()}>
													<TextArea {...field} onChange={handleChange} autoComplete={isoff} placeholder='Enter comments here'/>
													{ form.touched[field.name] && form.errors[field.name] && <Label className="ui above prompt label errorlabel"><i className="fa fa-exclamation-triangle"></i>{form.errors[field.name]}</Label> }
												</Form.Field>
												)}
											</Field>
										</Form.Group>
									</div>
								</div>

								<div className="columns iscolumns is-mobile">
									<div className="column is-one-third">
										<h2>Administrator comments</h2>
										<h3>(visible only to you)</h3>
									</div>
									<div className="column iscontent">
										<Form.Group widths='equal'>
											<Field name="admin_comments">
												{({ field, form }) => (
												<Form.Field className={(() => {return form.touched[field.name] && form.errors[field.name] ? 'error' : "";})()}>
													<TextArea {...field} onChange={handleChange} autoComplete={isoff} placeholder='Enter comments here'/>
													{ form.touched[field.name] && form.errors[field.name] && <Label className="ui above prompt label errorlabel"><i className="fa fa-exclamation-triangle"></i>{form.errors[field.name]}</Label> }
												</Form.Field>
												)}
											</Field>
										</Form.Group>
									</div>
								</div>*/}

								{/*props.pay==true&&<div className="columns iscolumns is-mobile">
									<div className="column is-one-third"></div>
									<div className="column iscontent">
										{ispayable&&<Message
										  negative
											icon='info circle'
											header='Notes'
											content='The button below that Mark sum as paid will be enable automatically if the affiliate has earnings.'
										/>}
										{!ispayable&&<Message
										  positive
											icon='info circle'
											header='Notes'
											content='This action will only mark the entered sum as paid for that affiliate, no money will be actually transferred.'
										/>}
									  <Button className='blue' disabled={ispayable} icon onClick={handleSubmit} loading={btnspin}><Icon name='check circle' /> Mark sum as paid</Button>
									</div>
								</div>*/}
							</Form>
						</div>
				 )}}/>
        </div>
	)
}
